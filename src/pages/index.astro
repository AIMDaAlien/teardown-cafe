---
import BaseLayout from '../layouts/BaseLayout.astro';
import CircuitAccents from '../components/CircuitAccents.astro';
import WaveDiffusions from '../components/WaveDiffusions.astro';
import FloatingParticles from '../components/FloatingParticles.astro';
import DeviceIcons from '../components/DeviceIcons.astro';
import FocusMode from '../components/FocusMode.astro';
import { getCollection } from 'astro:content';

const teardowns = await getCollection('teardowns');

const sortedTeardowns = teardowns.sort((a, b) => {
  return b.data.pubDate.valueOf() - a.data.pubDate.valueOf();
});
---

<BaseLayout title="Home">
<!-- Ambient effects -->
  <CircuitAccents />
  <WaveDiffusions />
  <FloatingParticles />
  
  <!-- Focus Mode Toggle -->
  <FocusMode />

  <!-- Content layer -->
  <div class="content-wrapper">
    <section class="hero" id="intro">
      <h1 class="display-large">Teardown Cafe</h1>
      <p class="hero-subtitle">
        Curiosity meets caffeine. Constructing and deconstructing is either screwing or unscrewing ðŸ”©
      </p>
    </section>

    <section class="teardowns-grid" id="components">
      {sortedTeardowns.map((teardown, index) => (
        <article class="teardown-card" style={`--card-index: ${index};`} data-card-index={index}>
          <a href={`/teardowns/${teardown.id}`} class="card-link">
            {teardown.data.heroImage && (
              <div class="card-image">
                <img 
                  src={teardown.data.heroImage} 
                  alt={teardown.data.title}
                  loading="lazy"
                />
                <div class="image-overlay" aria-hidden="true"></div>
              </div>
            )}
            <div class="card-content">
              <div class="card-meta">
                <span class="device-type">
                  <span class="device-icon" aria-hidden="true">
                    <DeviceIcons type={teardown.data.device} class="icon-svg" />
                  </span>
                  {teardown.data.device}
                </span>
                <span class="difficulty difficulty-{teardown.data.difficulty}">
                  {teardown.data.difficulty}
                </span>
              </div>
              <h2 class="title-large">{teardown.data.title}</h2>
              <p class="card-description">{teardown.data.description}</p>
              <time class="card-date" datetime={teardown.data.pubDate.toISOString()}>
                {teardown.data.pubDate.toLocaleDateString('en-US', {
                  year: 'numeric',
                  month: 'long',
                  day: 'numeric'
                })}
              </time>
            </div>
          </a>
        </article>
      ))}
    </section>

    {sortedTeardowns.length === 0 && (
      <div class="empty-state" id="analysis">
        <p>No teardowns yet. Check back soon!</p>
      </div>
    )}

    <!-- Footer/conclusion section -->
    <section class="site-footer" id="conclusion">
      <p class="footer-text">More teardowns coming soon. Stay curious.</p>
    </section>
  </div>
</BaseLayout>

<style>
  .content-wrapper {
    position: relative;
    z-index: 1;
    padding-top: 120px; /* Space for fixed progress bar */
  }

  .hero {
    text-align: center;
    margin-bottom: 3rem;
    padding: 2rem 0;
    position: relative;
    z-index: 2;
    min-height: 40vh;
    display: flex;
    flex-direction: column;
    justify-content: center;
  }
  
  .hero-subtitle {
    font-size: 1.25rem;
    color: var(--md-sys-color-on-surface-variant);
    margin-top: 1rem;
    animation: fadeInUp 0.8s var(--md-sys-motion-easing-decelerate) 0.2s both;
  }
  
  .display-large {
    animation: fadeInUp 0.8s var(--md-sys-motion-easing-decelerate) both;
  }

  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  
  .teardowns-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));
    gap: 1.5rem;
    margin: 4rem 0;
    position: relative;
    z-index: 2;
  }
  
  .teardown-card {
    background-color: var(--md-sys-color-surface-container);
    border-radius: var(--md-sys-shape-corner-large);
    overflow: hidden;
    transition: box-shadow var(--md-sys-motion-duration-medium) var(--md-sys-motion-easing-spring-soft);
    box-shadow: var(--md-sys-elevation-level1);
    opacity: 0;
    animation: cardFadeIn 0.6s var(--md-sys-motion-easing-decelerate) forwards;
    animation-delay: calc(var(--card-index) * 100ms + 400ms);
    position: relative;
    will-change: transform, box-shadow;
  }

  @keyframes cardFadeIn {
    from {
      opacity: 0;
      transform: translateY(30px) scale(0.95);
    }
    to {
      opacity: 1;
      transform: translateY(0) scale(1);
    }
  }
  
  .teardown-card:hover {
    box-shadow: var(--md-sys-elevation-level4);
  }

  .teardown-card::before {
    content: '';
    position: absolute;
    inset: 0;
    background: var(--md-sys-color-surface-container-high);
    opacity: 0;
    transition: opacity var(--md-sys-motion-duration-medium) var(--md-sys-motion-easing-standard);
    backdrop-filter: blur(0px);
    z-index: -1;
  }

  .teardown-card:hover::before {
    opacity: 0.3;
    backdrop-filter: blur(8px);
  }
  
  .card-link {
    text-decoration: none;
    color: inherit;
    display: block;
  }
  
  .card-image {
    position: relative;
    width: 100%;
    padding-top: 56.25%;
    background-color: var(--md-sys-color-surface-container-highest);
    overflow: hidden;
  }
  
  .card-image img {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform var(--md-sys-motion-duration-medium) var(--md-sys-motion-easing-spring);
  }
  
  .teardown-card:hover .card-image img {
    transform: scale(1.12);
  }

  .image-overlay {
    position: absolute;
    inset: 0;
    background: linear-gradient(180deg, transparent 0%, rgba(19, 18, 24, 0.4) 100%);
    opacity: 0;
    transition: opacity var(--md-sys-motion-duration-short) var(--md-sys-motion-easing-standard);
  }

  .teardown-card:hover .image-overlay {
    opacity: 1;
  }
  
  .card-content {
    padding: 1.5rem;
    position: relative;
    background: var(--md-sys-color-surface-container);
  }
  
  .card-meta {
    display: flex;
    gap: 0.75rem;
    margin-bottom: 0.75rem;
    flex-wrap: wrap;
  }
  
  .device-type {
    background-color: var(--md-sys-color-primary-container);
    color: var(--md-sys-color-on-primary-container);
    padding: 0.35rem 0.85rem;
    border-radius: var(--md-sys-shape-corner-full);
    font-size: 0.875rem;
    font-weight: 500;
    text-transform: capitalize;
    display: inline-flex;
    align-items: center;
    gap: 0.35rem;
    transition: all var(--md-sys-motion-duration-short) var(--md-sys-motion-easing-spring-soft);
  }

  .device-icon {
    width: 16px;
    height: 16px;
    display: inline-flex;
    align-items: center;
    justify-content: center;
  }

  .device-icon :global(.icon-svg) {
    width: 100%;
    height: 100%;
  }

  .teardown-card:hover .device-type {
    transform: scale(1.05);
    background-color: var(--md-sys-color-primary);
    color: var(--md-sys-color-on-primary);
  }
  
  .difficulty {
    padding: 0.35rem 0.85rem;
    border-radius: var(--md-sys-shape-corner-full);
    font-size: 0.875rem;
    font-weight: 500;
    text-transform: capitalize;
    transition: transform var(--md-sys-motion-duration-short) var(--md-sys-motion-easing-spring-soft);
  }

  .teardown-card:hover .difficulty {
    transform: scale(1.05);
  }
  
  .difficulty-easy {
    background-color: var(--md-sys-color-accent-green);
    color: #1B5E20;
  }
  
  .difficulty-medium {
    background-color: var(--md-sys-color-accent-amber);
    color: #E65100;
  }
  
  .difficulty-hard {
    background-color: #EF5350;
    color: #FFEBEE;
  }
  
  .card-content h2 {
    margin: 0.5rem 0;
    color: var(--md-sys-color-on-surface);
    transition: color var(--md-sys-motion-duration-short) var(--md-sys-motion-easing-standard);
  }

  .teardown-card:hover .card-content h2 {
    color: var(--md-sys-color-primary);
  }
  
  .card-description {
    color: var(--md-sys-color-on-surface-variant);
    margin: 0.75rem 0;
    line-height: 1.5;
  }
  
  .card-date {
    display: block;
    font-size: 0.875rem;
    color: var(--md-sys-color-on-surface-variant);
    margin-top: 0.75rem;
  }
  
  .empty-state {
    text-align: center;
    padding: 4rem 2rem;
    color: var(--md-sys-color-on-surface-variant);
    font-size: 1.25rem;
    min-height: 40vh;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .site-footer {
    text-align: center;
    padding: 4rem 2rem 8rem;
    min-height: 30vh;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .footer-text {
    font-size: 1.125rem;
    color: var(--md-sys-color-on-surface-variant);
  }

  @media (prefers-reduced-motion: reduce) {
    .teardown-card,
    .hero-subtitle,
    .display-large {
      animation: fadeInSimple 0.6s ease-out both;
    }

    @keyframes fadeInSimple {
      from { opacity: 0; }
      to { opacity: 1; }
    }

    .teardown-card:hover {
      transform: none;
    }

    .teardown-card:hover .card-image img {
      transform: none;
    }

    .teardown-card:hover .device-type,
    .teardown-card:hover .difficulty {
      transform: none;
    }
  }
  
  @media (max-width: 768px) {
    .content-wrapper {
      padding-top: 100px;
    }

    .teardowns-grid {
      grid-template-columns: 1fr;
      margin: 2rem 0;
    }

    .hero {
      padding: 1.5rem 0;
      margin-bottom: 2rem;
      min-height: 30vh;
    }
  }
</style>

<script>
  const prefersReducedMotion = window.matchMedia('(prefers-reduced-motion: reduce)').matches;
  
  if (!prefersReducedMotion) {
    const cards = document.querySelectorAll('.teardown-card') as NodeListOf<HTMLElement>;
    
    interface CardPhysicsState {
      x: number;
      y: number;
      rotation: number;
      velocityX: number;
      velocityY: number;
      velocityRotation: number;
      isHovered: boolean;
      targetX: number;
      targetY: number;
      targetRotation: number;
    }
    
    const cardStates: CardPhysicsState[] = Array.from(cards).map(() => ({
      x: 0,
      y: -12,
      rotation: 0,
      velocityX: 0,
      velocityY: 0,
      velocityRotation: 0,
      isHovered: false,
      targetX: 0,
      targetY: -12,
      targetRotation: 0
    }));
    
    const SPRING_TENSION = 0.18;
    const SPRING_FRICTION = 0.22;
    const GRAVITY = 0.6;
    const LIFT_HEIGHT = 12;
    const ROTATION_MAX = 2;
    
    let rafId: number | null = null;
    
    function updateCardPhysics() {
      let needsUpdate = false;
      
      cards.forEach((card, index) => {
        const state = cardStates[index];
        
        if (state.isHovered) {
          const dx = state.targetX - state.x;
          const dy = state.targetY - state.y;
          const dRot = state.targetRotation - state.rotation;
          
          state.velocityX += dx * SPRING_TENSION;
          state.velocityY += dy * SPRING_TENSION;
          state.velocityRotation += dRot * SPRING_TENSION;
        } else {
          state.velocityX += (0 - state.x) * SPRING_TENSION;
          state.velocityY += (0 - state.y) * SPRING_TENSION + GRAVITY;
          state.velocityRotation += (0 - state.rotation) * SPRING_TENSION;
        }
        
        state.velocityX *= (1 - SPRING_FRICTION);
        state.velocityY *= (1 - SPRING_FRICTION);
        state.velocityRotation *= (1 - SPRING_FRICTION);
        
        state.x += state.velocityX;
        state.y += state.velocityY;
        state.rotation += state.velocityRotation;
        
        card.style.transform = `translate3d(${state.x}px, ${state.y}px, 0) rotate(${state.rotation}deg) scale(${state.isHovered ? 1.03 : 1})`;
        
        if (Math.abs(state.velocityX) > 0.01 || Math.abs(state.velocityY) > 0.01 || Math.abs(state.velocityRotation) > 0.01) {
          needsUpdate = true;
        }
      });
      
      if (needsUpdate) {
        rafId = requestAnimationFrame(updateCardPhysics);
      } else {
        rafId = null;
      }
    }
    
    cards.forEach((card, index) => {
      card.addEventListener('mouseenter', () => {
        cardStates[index].isHovered = true;
        cardStates[index].targetY = -LIFT_HEIGHT;
        
        if (rafId === null) {
          rafId = requestAnimationFrame(updateCardPhysics);
        }
      });
      
      card.addEventListener('mouseleave', () => {
        cardStates[index].isHovered = false;
        cardStates[index].targetX = 0;
        cardStates[index].targetY = 0;
        cardStates[index].targetRotation = 0;
        
        if (rafId === null) {
          rafId = requestAnimationFrame(updateCardPhysics);
        }
      });
      
      card.addEventListener('mousemove', (e: MouseEvent) => {
        if (cardStates[index].isHovered) {
          const rect = card.getBoundingClientRect();
          const centerX = rect.left + rect.width / 2;
          const centerY = rect.top + rect.height / 2;
          
          const relativeX = e.clientX - centerX;
          const relativeY = e.clientY - centerY;
          
          cardStates[index].targetRotation = (relativeX / rect.width) * ROTATION_MAX;
          cardStates[index].targetX = (relativeX / rect.width) * 4;
        }
      });
    });
  }
</script>
