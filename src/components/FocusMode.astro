---
// Focus Mode Toggle - Accessibility feature for ADHD/concentration
// Disables animations and background effects for distraction-free reading
---

<button 
  id="focus-mode-toggle" 
  class="focus-toggle"
  aria-label="Toggle focus mode"
  title="Focus Mode: Reduce distractions"
>
  <svg class="icon-focus-off" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
    <circle cx="12" cy="12" r="3" stroke="currentColor" stroke-width="2"/>
    <path d="M12 5v2M12 17v2M5 12h2M17 12h2" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
  </svg>
  <svg class="icon-focus-on" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
    <circle cx="12" cy="12" r="3" fill="currentColor"/>
    <path d="M12 5v2M12 17v2M5 12h2M17 12h2" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
  </svg>
  <span class="toggle-label">Focus</span>
</button>

<style>
  .focus-toggle {
    position: fixed;
    bottom: 24px;
    right: 24px;
    z-index: 100;
    display: flex;
    align-items: center;
    gap: 8px;
    padding: 12px 16px;
    background: var(--md-sys-color-surface-container-high);
    border: 1px solid var(--md-sys-color-outline-variant);
    border-radius: var(--md-sys-shape-corner-full);
    color: var(--md-sys-color-on-surface);
    font-weight: 500;
    font-size: 14px;
    cursor: pointer;
    transition: all 200ms cubic-bezier(0.4, 0, 0.2, 1);
    box-shadow: var(--md-sys-elevation-level2);
    font-family: inherit;
  }

  .focus-toggle:hover {
    background: var(--md-sys-color-primary-container);
    color: var(--md-sys-color-on-primary-container);
    box-shadow: var(--md-sys-elevation-level3);
    transform: scale(1.05);
  }

  .focus-toggle svg {
    width: 20px;
    height: 20px;
    color: currentColor;
  }

  .icon-focus-off {
    display: block;
  }

  .icon-focus-on {
    display: none;
  }

  .focus-toggle.active {
    background: var(--md-sys-color-primary);
    color: var(--md-sys-color-on-primary);
    border-color: var(--md-sys-color-primary);
  }

  .focus-toggle.active .icon-focus-off {
    display: none;
  }

  .focus-toggle.active .icon-focus-on {
    display: block;
  }

  /* Focus mode styles applied to body */
  :global(body[data-focus-mode="true"]) :global(.circuit-accents),
  :global(body[data-focus-mode="true"]) :global(.wave-diffusions),
  :global(body[data-focus-mode="true"]) :global(.floating-particles) {
    display: none !important;
  }

  :global(body[data-focus-mode="true"]) * {
    animation-duration: 0.01ms !important;
    animation-iteration-count: 1 !important;
    transition-duration: 0.01ms !important;
  }

  :global(body[data-focus-mode="true"]) :global(.teardown-card),
  :global(body[data-focus-mode="true"]) :global(.device-type),
  :global(body[data-focus-mode="true"]) :global(.difficulty) {
    transform: none !important;
  }

  @media (max-width: 768px) {
    .focus-toggle {
      bottom: 16px;
      right: 16px;
      padding: 10px 14px;
      font-size: 12px;
    }

    .focus-toggle svg {
      width: 18px;
      height: 18px;
    }

    .toggle-label {
      display: none;
    }
  }
</style>

<script>
  const toggle = document.getElementById('focus-mode-toggle');
  
  // Check saved preference
  const focusMode = localStorage.getItem('focus-mode') === 'true';
  
  if (focusMode) {
    document.body.setAttribute('data-focus-mode', 'true');
    toggle?.classList.add('active');
  }

  toggle?.addEventListener('click', () => {
    const isActive = document.body.getAttribute('data-focus-mode') === 'true';
    
    if (isActive) {
      document.body.removeAttribute('data-focus-mode');
      toggle.classList.remove('active');
      localStorage.setItem('focus-mode', 'false');
    } else {
      document.body.setAttribute('data-focus-mode', 'true');
      toggle.classList.add('active');
      localStorage.setItem('focus-mode', 'true');
    }
  });
</script>
